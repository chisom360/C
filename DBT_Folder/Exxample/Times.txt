/*
#include <iostream>
#include <chrono>

template <typename TimeT = std::chrono::milliseconds>
struct measure
{
    template <typename F, typename... Args>
    static typename TimeT::rep execution(F &&func, Args &&... args)
    {
        auto start = std::chrono::steady_clock::now();
        std::forward<decltype(func)>(func)(std::forward<Args>(args)...);
        auto duration = std::chrono::duration_cast<TimeT>(std::chrono::steady_clock::now() - start);
        return duration.count();
    }
};

int main()
{

    //***C++11 Style:***
    std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();

    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << std::endl;
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin).count() << std::endl;
}
*/

#include <ctime>
#include <cstdio>
#include <iostream>
#include <chrono>
#include <sys/time.h>
using namespace std;
using namespace std::chrono;

void f1()
{
    high_resolution_clock::time_point t1 = high_resolution_clock::now();
    high_resolution_clock::time_point t2 = high_resolution_clock::now();
    double dif = duration_cast<nanoseconds>(t2 - t1).count();
    printf("Elasped time is %lf nanoseconds.\n", dif);
}

void f2()
{
    timespec ts1, ts2;
    clock_gettime(CLOCK_REALTIME, &ts1);
    clock_gettime(CLOCK_REALTIME, &ts2);
    double dif = double(ts2.tv_nsec - ts1.tv_nsec);
    printf("Elasped time is %lf nanoseconds.\n", dif);
}

void f3()
{
    struct timeval t1, t0;
    gettimeofday(&t0, 0);
    gettimeofday(&t1, 0);
    double dif = double((t1.tv_usec - t0.tv_usec) * 1000);
    printf("Elasped time is %lf nanoseconds.\n", dif);
}
void f4()
{
    high_resolution_clock::time_point t1, t2;
    double diff = 0;
    t1 = high_resolution_clock::now();
    for (int i = 1; i <= 10; i++)
    {
        t2 = high_resolution_clock::now();
        diff += duration_cast<nanoseconds>(t2 - t1).count();
        t1 = t2;
    }
    printf("high_resolution_clock:: Elasped time is %lf nanoseconds.\n", diff / 10);
}

void f5()
{
    timespec ts1, ts2;
    double diff = 0;
    clock_gettime(CLOCK_REALTIME, &ts1);
    for (int i = 1; i <= 10; i++)
    {
        clock_gettime(CLOCK_REALTIME, &ts2);
        diff += double(ts2.tv_nsec - ts1.tv_nsec);
        ts1 = ts2;
    }
    printf("clock_gettime:: Elasped time is %lf nanoseconds.\n", diff / 10);
}

void f6()
{
    struct timeval t1, t2;
    double diff = 0;
    gettimeofday(&t1, 0);
    for (int i = 1; i <= 10; i++)
    {
        gettimeofday(&t2, 0);
        diff += double((t2.tv_usec - t1.tv_usec) * 1000);
        t1 = t2;
    }
    printf("gettimeofday:: Elasped time is %lf nanoseconds.\n", diff / 10);
}

int main()
{
    //  f1();
    //  f2();
    //  f3();
    f6();
    f4();
    f5();
    return 0;
}
